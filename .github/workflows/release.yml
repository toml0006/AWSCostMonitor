name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
      
    - name: Get Version from Tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Import Code Signing Certificates
      if: github.repository_owner == 'toml0006'
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
        p12-password: ${{ secrets.CERTIFICATES_P12_PASSWORD }}
      continue-on-error: true
    
    - name: Build and Archive App
      run: |
        cd packages/app/AWSCostMonitor
        
        # Clean build folder
        xcodebuild clean -project AWSCostMonitor.xcodeproj -scheme AWSCostMonitor
        
        # Check if we have signing certificates
        if security find-identity -v -p codesigning | grep -q "Developer ID Application"; then
          echo "Found Developer ID, building with code signing..."
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F'"' '{print $2}')
          
          # Build and archive with signing
          xcodebuild -project AWSCostMonitor.xcodeproj \
                     -scheme AWSCostMonitor \
                     -destination 'platform=macOS' \
                     -configuration Release \
                     -archivePath AWSCostMonitor.xcarchive \
                     -allowProvisioningUpdates \
                     CODE_SIGN_STYLE=Manual \
                     CODE_SIGN_IDENTITY="$IDENTITY" \
                     DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
                     archive
        else
          echo "No Developer ID found, building without code signing..."
          # Build and archive without signing
          xcodebuild -project AWSCostMonitor.xcodeproj \
                     -scheme AWSCostMonitor \
                     -destination 'platform=macOS' \
                     -configuration Release \
                     -archivePath AWSCostMonitor.xcarchive \
                     -allowProvisioningUpdates \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO \
                     archive
        fi
        
        # Create export options
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>mac-application</string>
            <key>destination</key>
            <string>export</string>
        </dict>
        </plist>
        EOF
        
        # Export app
        xcodebuild -exportArchive \
                   -archivePath AWSCostMonitor.xcarchive \
                   -exportOptionsPlist ExportOptions.plist \
                   -exportPath ./export
    
    - name: Notarize App
      if: github.repository_owner == 'toml0006' && success()
      run: |
        cd packages/app/AWSCostMonitor
        
        # Check if app is signed
        if codesign --verify --deep --strict ./export/AWSCostMonitor.app 2>/dev/null; then
          echo "App is signed, proceeding with notarization..."
          
          # Create zip for notarization
          ditto -c -k --keepParent ./export/AWSCostMonitor.app AWSCostMonitor-notarization.zip
          
          # Submit for notarization (if credentials are available)
          if [ -n "${{ secrets.APPLE_ID }}" ] && [ -n "${{ secrets.APP_PASSWORD }}" ] && [ -n "${{ secrets.TEAM_ID }}" ]; then
            xcrun notarytool submit AWSCostMonitor-notarization.zip \
              --apple-id "${{ secrets.APPLE_ID }}" \
              --team-id "${{ secrets.TEAM_ID }}" \
              --password "${{ secrets.APP_PASSWORD }}" \
              --wait || echo "Notarization failed, continuing without it"
              
            # Staple the ticket if notarization succeeded
            xcrun stapler staple ./export/AWSCostMonitor.app || echo "Stapling failed, continuing without it"
          else
            echo "Notarization credentials not found, skipping notarization"
          fi
          
          rm -f AWSCostMonitor-notarization.zip
        else
          echo "App is not signed, skipping notarization"
        fi
      continue-on-error: true
    
    - name: Create DMG
      run: |
        cd packages/app/AWSCostMonitor
        
        # Create DMG staging directory
        mkdir dmg-staging
        cp -R export/AWSCostMonitor.app dmg-staging/
        ln -s /Applications dmg-staging/Applications
        
        # Create DMG with proper naming
        hdiutil create -volname "AWS Cost Monitor ${{ steps.version.outputs.VERSION }}" \
                      -srcfolder dmg-staging \
                      -ov -format UDZO \
                      "AWSCostMonitor-${{ steps.version.outputs.VERSION }}.dmg"
    
    - name: Create Zip Archive
      run: |
        cd packages/app/AWSCostMonitor/export
        zip -r "../AWSCostMonitor-${{ steps.version.outputs.VERSION }}.zip" AWSCostMonitor.app
    
    - name: Generate Release Notes
      id: notes
      run: |
        cat > release_notes.md << EOF
        # AWS Cost Monitor ${{ steps.version.outputs.VERSION }}
        
        ## Installation
        
        ### Option 1: DMG Installer (Recommended)
        1. Download \`AWSCostMonitor-${{ steps.version.outputs.VERSION }}.dmg\`
        2. Open the DMG file
        3. Drag AWS Cost Monitor to Applications folder
        4. Launch from Applications
        
        ### Option 2: Zip Archive
        1. Download \`AWSCostMonitor-${{ steps.version.outputs.VERSION }}.zip\`
        2. Extract the zip file
        3. Move AWSCostMonitor.app to Applications folder
        4. Launch from Applications
        
        ## Requirements
        
        - macOS 13.0 (Ventura) or later
        - AWS CLI configured with profiles
        - Cost Explorer API permissions
        
        ## What's New in This Release
        
        - Enhanced UI with improved settings organization
        - Comprehensive help system with keyboard shortcuts
        - Privacy-first design with local data storage
        - Smart API rate limiting to protect your AWS costs
        - 14-day spending histograms with service breakdown
        
        ## Documentation
        
        Visit our [website](https://toml0006.github.io/AWSCostMonitor/) for installation guides and documentation.
        EOF
        
        echo "NOTES_FILE=release_notes.md" >> $GITHUB_OUTPUT
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: AWS Cost Monitor ${{ steps.version.outputs.VERSION }}
        body_path: ${{ steps.notes.outputs.NOTES_FILE }}
        files: |
          packages/app/AWSCostMonitor/AWSCostMonitor-${{ steps.version.outputs.VERSION }}.dmg
          packages/app/AWSCostMonitor/AWSCostMonitor-${{ steps.version.outputs.VERSION }}.zip
        draft: false
        prerelease: false
        fail_on_unmatched_files: true